{"filter":false,"title":"lambda_function.py","tooltip":"/lambda_function.py","undoManager":{"mark":57,"position":57,"stack":[[{"start":{"row":64,"column":66},"end":{"row":64,"column":67},"action":"insert","lines":["H"],"id":22},{"start":{"row":64,"column":67},"end":{"row":64,"column":68},"action":"insert","lines":["A"]},{"start":{"row":64,"column":68},"end":{"row":64,"column":69},"action":"insert","lines":["P"]},{"start":{"row":64,"column":69},"end":{"row":64,"column":70},"action":"insert","lines":["1"]}],[{"start":{"row":64,"column":70},"end":{"row":64,"column":71},"action":"insert","lines":[" "],"id":23}],[{"start":{"row":34,"column":56},"end":{"row":35,"column":0},"action":"insert","lines":["",""],"id":24},{"start":{"row":35,"column":0},"end":{"row":35,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":30,"column":35},"end":{"row":31,"column":0},"action":"insert","lines":["",""],"id":30},{"start":{"row":31,"column":0},"end":{"row":31,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":31,"column":4},"end":{"row":35,"column":5},"action":"insert","lines":["   print(event)","    return {","        'statusCode': 200,","        'body': json.dumps(event)","    }"],"id":31}],[{"start":{"row":31,"column":6},"end":{"row":31,"column":7},"action":"remove","lines":[" "],"id":32},{"start":{"row":31,"column":5},"end":{"row":31,"column":6},"action":"remove","lines":[" "]},{"start":{"row":31,"column":4},"end":{"row":31,"column":5},"action":"remove","lines":[" "]}],[{"start":{"row":31,"column":0},"end":{"row":35,"column":5},"action":"remove","lines":["    print(event)","    return {","        'statusCode': 200,","        'body': json.dumps(event)","    }"],"id":33},{"start":{"row":30,"column":35},"end":{"row":31,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":35,"column":8},"end":{"row":39,"column":0},"action":"insert","lines":["        return {","            'statusCode': 200,","            'body': json.dumps(response_body)","        }",""],"id":34}],[{"start":{"row":35,"column":12},"end":{"row":35,"column":16},"action":"remove","lines":["    "],"id":35},{"start":{"row":35,"column":8},"end":{"row":35,"column":12},"action":"remove","lines":["    "]}],[{"start":{"row":37,"column":31},"end":{"row":37,"column":32},"action":"insert","lines":["{"],"id":36}],[{"start":{"row":37,"column":33},"end":{"row":37,"column":45},"action":"remove","lines":["esponse_body"],"id":37},{"start":{"row":37,"column":32},"end":{"row":37,"column":33},"action":"remove","lines":["r"]}],[{"start":{"row":37,"column":32},"end":{"row":37,"column":33},"action":"insert","lines":["}"],"id":38}],[{"start":{"row":37,"column":32},"end":{"row":37,"column":33},"action":"insert","lines":["c"],"id":39}],[{"start":{"row":37,"column":32},"end":{"row":37,"column":33},"action":"remove","lines":["c"],"id":40}],[{"start":{"row":37,"column":32},"end":{"row":37,"column":34},"action":"insert","lines":["''"],"id":41}],[{"start":{"row":37,"column":33},"end":{"row":37,"column":34},"action":"insert","lines":["c"],"id":42},{"start":{"row":37,"column":34},"end":{"row":37,"column":35},"action":"insert","lines":["h"]},{"start":{"row":37,"column":35},"end":{"row":37,"column":36},"action":"insert","lines":["r"]}],[{"start":{"row":37,"column":37},"end":{"row":37,"column":38},"action":"insert","lines":[":"],"id":43}],[{"start":{"row":37,"column":38},"end":{"row":37,"column":39},"action":"insert","lines":[" "],"id":44},{"start":{"row":37,"column":39},"end":{"row":37,"column":40},"action":"insert","lines":["c"]},{"start":{"row":37,"column":40},"end":{"row":37,"column":41},"action":"insert","lines":["h"]},{"start":{"row":37,"column":41},"end":{"row":37,"column":42},"action":"insert","lines":["r"]},{"start":{"row":37,"column":42},"end":{"row":37,"column":43},"action":"insert","lines":["o"]},{"start":{"row":37,"column":43},"end":{"row":37,"column":44},"action":"insert","lines":["m"]}],[{"start":{"row":37,"column":39},"end":{"row":37,"column":44},"action":"remove","lines":["chrom"],"id":45},{"start":{"row":37,"column":39},"end":{"row":37,"column":49},"action":"insert","lines":["chromosome"]}],[{"start":{"row":37,"column":49},"end":{"row":37,"column":50},"action":"insert","lines":[","],"id":46}],[{"start":{"row":37,"column":50},"end":{"row":37,"column":51},"action":"insert","lines":[" "],"id":47}],[{"start":{"row":37,"column":51},"end":{"row":37,"column":53},"action":"insert","lines":["''"],"id":48}],[{"start":{"row":37,"column":52},"end":{"row":37,"column":53},"action":"insert","lines":["s"],"id":49},{"start":{"row":37,"column":53},"end":{"row":37,"column":54},"action":"insert","lines":["t"]},{"start":{"row":37,"column":54},"end":{"row":37,"column":55},"action":"insert","lines":["r"]}],[{"start":{"row":37,"column":56},"end":{"row":37,"column":57},"action":"insert","lines":[":"],"id":50}],[{"start":{"row":37,"column":57},"end":{"row":37,"column":58},"action":"insert","lines":[" "],"id":51},{"start":{"row":37,"column":58},"end":{"row":37,"column":59},"action":"insert","lines":["s"]},{"start":{"row":37,"column":59},"end":{"row":37,"column":60},"action":"insert","lines":["t"]},{"start":{"row":37,"column":60},"end":{"row":37,"column":61},"action":"insert","lines":["a"]},{"start":{"row":37,"column":61},"end":{"row":37,"column":62},"action":"insert","lines":["r"]}],[{"start":{"row":37,"column":62},"end":{"row":37,"column":63},"action":"insert","lines":["t"],"id":52},{"start":{"row":37,"column":63},"end":{"row":37,"column":64},"action":"insert","lines":["m"]}],[{"start":{"row":37,"column":63},"end":{"row":37,"column":64},"action":"remove","lines":["m"],"id":53}],[{"start":{"row":37,"column":63},"end":{"row":37,"column":64},"action":"insert","lines":[","],"id":54}],[{"start":{"row":37,"column":64},"end":{"row":37,"column":65},"action":"insert","lines":[" "],"id":55}],[{"start":{"row":37,"column":65},"end":{"row":37,"column":67},"action":"insert","lines":["''"],"id":56}],[{"start":{"row":37,"column":66},"end":{"row":37,"column":67},"action":"insert","lines":["e"],"id":57},{"start":{"row":37,"column":67},"end":{"row":37,"column":68},"action":"insert","lines":["n"]},{"start":{"row":37,"column":68},"end":{"row":37,"column":69},"action":"insert","lines":["d"]}],[{"start":{"row":37,"column":70},"end":{"row":37,"column":71},"action":"insert","lines":[":"],"id":58}],[{"start":{"row":37,"column":71},"end":{"row":37,"column":72},"action":"insert","lines":[" "],"id":59},{"start":{"row":37,"column":72},"end":{"row":37,"column":73},"action":"insert","lines":["e"]}],[{"start":{"row":37,"column":73},"end":{"row":37,"column":74},"action":"insert","lines":["n"],"id":60},{"start":{"row":37,"column":74},"end":{"row":37,"column":75},"action":"insert","lines":["d"]}],[{"start":{"row":35,"column":0},"end":{"row":38,"column":9},"action":"remove","lines":["        return {","            'statusCode': 200,","            'body': json.dumps({'chr': chromosome, 'str': start, 'end': end})","        }"],"id":61},{"start":{"row":34,"column":56},"end":{"row":35,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":34,"column":56},"end":{"row":35,"column":0},"action":"remove","lines":["",""],"id":62}],[{"start":{"row":0,"column":0},"end":{"row":66,"column":0},"action":"remove","lines":["import json","import pysam","import os","import logging","","# Setup logger","logger = logging.getLogger()","logger.setLevel(logging.INFO)","","def process_vcf_file(vcf_file_path, chromosome, start, end):","    try:","        logger.info(f\"Processing VCF file: {vcf_file_path} for chromosome: {chromosome}, start: {start}, end: {end}\")","        vcf = pysam.VariantFile(vcf_file_path)","        ","        found_variants = []","        for rec in vcf.fetch(chromosome, start, end):","            variant_info = {","                \"chrom\": rec.chrom,","                \"pos\": rec.pos,","                \"ref\": rec.ref,","                \"alt\": ','.join(rec.alts)  # Joining all alleles in the alt field for simplicity","            }","            found_variants.append(variant_info)","            logger.info(f\"Found variant: {variant_info}\")","","        return found_variants","    except Exception as e:","        logger.error(f\"Error processing VCF file {vcf_file_path}: {str(e)}\")","        raise","","def lambda_handler(event, context):","    try:","        chromosome = event['queryStringParameters']['chromosome']","        start = int(event['queryStringParameters']['start'])","        end = int(event['queryStringParameters']['end'])","","        # Adjusted file paths to match the location within the Docker image","        vcf_file_path = '/data/GATK_variants.vcf.gz'","        ","        # Checking and logging directory contents where VCF files are located","        data_contents = os.listdir('/data')","        logger.info(f\"Contents of /data directory: {data_contents}\")","","        found_variants = process_vcf_file(vcf_file_path, chromosome, start, end)","","        response_body = {","            \"message\": \"Variants found\",","            \"variants\": found_variants,","            \"query\": {","                \"chromosome\": chromosome,","                \"start\": start,","                \"end\": end","            }","        }","","        return {","            'statusCode': 200,","            'body': json.dumps(response_body)","        }","","    except Exception as e:","        logger.error(f\"Error in lambda_handler: {str(e)}\")","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'Error processing your HAP1 request'})","        }",""],"id":63},{"start":{"row":0,"column":0},"end":{"row":88,"column":0},"action":"insert","lines":["import json","import pysam","import os","import logging","","# Setup logger","logger = logging.getLogger()","logger.setLevel(logging.INFO)","","def extract_query_params(event):","    \"\"\"","    Extracts and validates query parameters from the event object.","    Returns a tuple of (chromosome, start, end) if valid, otherwise None.","    \"\"\"","    query_params = event.get('queryStringParameters')","    if not query_params:","        logger.error(\"No query string parameters provided.\")","        return None","","    chromosome = query_params.get('chromosome')","    start = query_params.get('start')","    end = query_params.get('end')","","    if not all([chromosome, start, end]):","        logger.error(\"Incomplete query string parameters.\")","        return None","","    try:","        start, end = int(start), int(end)","    except ValueError:","        logger.error(\"Invalid query parameter format.\")","        return None","","    return chromosome, start, end","","def process_vcf_file(vcf_file_path, chromosome, start, end):","    \"\"\"","    Processes the VCF file and returns found variants.","    \"\"\"","    try:","        logger.info(f\"Processing VCF file: {vcf_file_path} for chromosome: {chromosome}, start: {start}, end: {end}\")","        vcf = pysam.VariantFile(vcf_file_path)","        ","        found_variants = [ ","            {","                \"chrom\": rec.chrom,","                \"pos\": rec.pos,","                \"ref\": rec.ref,","                \"alt\": ','.join(rec.alts)","            }","            for rec in vcf.fetch(chromosome, start, end)","        ]","","        return found_variants","    except Exception as e:","        logger.error(f\"Error processing VCF file {vcf_file_path}: {str(e)}\")","        return None","","def generate_response(message, variants=None, query=None):","    \"\"\"","    Generates an HTTP response body with the specified message and optional variant data.","    \"\"\"","    response_body = {","        \"message\": message,","        \"variants\": variants if variants is not None else [],","        \"query\": query if query is not None else {}","    }","    return {","        'statusCode': 200 if variants is not None else 500,","        'body': json.dumps(response_body)","    }","","def lambda_handler(event, context):","    params = extract_query_params(event)","    if params is None:","        return generate_response('Invalid or missing query parameters')","","    chromosome, start, end = params","    vcf_file_path = '/data/GATK_variants.vcf.gz'","    ","    logger.info(f\"Contents of /data directory: {os.listdir('/data')}\")","    found_variants = process_vcf_file(vcf_file_path, chromosome, start, end)","","    if found_variants is None:","        return generate_response('Error processing your request')","","    message = \"Variants found\" if found_variants else \"No variants found\"","    return generate_response(message, found_variants, {\"chromosome\": chromosome, \"start\": start, \"end\": end})",""]}],[{"start":{"row":59,"column":0},"end":{"row":61,"column":7},"action":"remove","lines":["    \"\"\"","    Generates an HTTP response body with the specified message and optional variant data.","    \"\"\""],"id":64},{"start":{"row":58,"column":58},"end":{"row":59,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":36,"column":0},"end":{"row":38,"column":7},"action":"remove","lines":["    \"\"\"","    Processes the VCF file and returns found variants.","    \"\"\""],"id":65},{"start":{"row":35,"column":60},"end":{"row":36,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":10,"column":0},"end":{"row":13,"column":7},"action":"remove","lines":["    \"\"\"","    Extracts and validates query parameters from the event object.","    Returns a tuple of (chromosome, start, end) if valid, otherwise None.","    \"\"\""],"id":66},{"start":{"row":9,"column":32},"end":{"row":10,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":5,"column":0},"end":{"row":6,"column":0},"action":"remove","lines":["# Setup logger",""],"id":67}],[{"start":{"row":55,"column":5},"end":{"row":56,"column":0},"action":"insert","lines":["",""],"id":68},{"start":{"row":56,"column":0},"end":{"row":56,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":56,"column":0},"end":{"row":56,"column":4},"action":"remove","lines":["    "],"id":69}],[{"start":{"row":60,"column":5},"end":{"row":61,"column":0},"action":"insert","lines":["",""],"id":70},{"start":{"row":61,"column":0},"end":{"row":61,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":61,"column":0},"end":{"row":61,"column":4},"action":"remove","lines":["    "],"id":71}],[{"start":{"row":60,"column":5},"end":{"row":61,"column":0},"action":"remove","lines":["",""],"id":72}],[{"start":{"row":45,"column":29},"end":{"row":46,"column":0},"action":"insert","lines":["",""],"id":73},{"start":{"row":46,"column":0},"end":{"row":46,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":46,"column":4},"end":{"row":46,"column":8},"action":"remove","lines":["    "],"id":74}],[{"start":{"row":48,"column":76},"end":{"row":49,"column":0},"action":"insert","lines":["",""],"id":75},{"start":{"row":49,"column":0},"end":{"row":49,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":49,"column":4},"end":{"row":49,"column":8},"action":"remove","lines":["    "],"id":76},{"start":{"row":49,"column":0},"end":{"row":49,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":19,"column":59},"end":{"row":20,"column":0},"action":"insert","lines":["",""],"id":77},{"start":{"row":20,"column":0},"end":{"row":20,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":20,"column":4},"end":{"row":20,"column":8},"action":"remove","lines":["    "],"id":78},{"start":{"row":20,"column":0},"end":{"row":20,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":26,"column":55},"end":{"row":27,"column":0},"action":"insert","lines":["",""],"id":79},{"start":{"row":27,"column":0},"end":{"row":27,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":27,"column":4},"end":{"row":27,"column":8},"action":"remove","lines":["    "],"id":80},{"start":{"row":27,"column":0},"end":{"row":27,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":11,"column":60},"end":{"row":12,"column":0},"action":"insert","lines":["",""],"id":81},{"start":{"row":12,"column":0},"end":{"row":12,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":12,"column":4},"end":{"row":12,"column":8},"action":"remove","lines":["    "],"id":82},{"start":{"row":12,"column":0},"end":{"row":12,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":81,"column":73},"end":{"row":82,"column":0},"action":"insert","lines":["",""],"id":83},{"start":{"row":82,"column":0},"end":{"row":82,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":82,"column":0},"end":{"row":82,"column":4},"action":"remove","lines":["    "],"id":84}]]},"ace":{"folds":[],"scrolltop":1063.7999999999993,"scrollleft":0,"selection":{"start":{"row":13,"column":19},"end":{"row":13,"column":19},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":26,"state":"start","mode":"ace/mode/python"}},"timestamp":1709652243541,"hash":"f52ba3c90c64b1c105d7aa503c774b896fd0f802"}