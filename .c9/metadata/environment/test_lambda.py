{"filter":false,"title":"test_lambda.py","tooltip":"/test_lambda.py","undoManager":{"mark":3,"position":3,"stack":[[{"start":{"row":0,"column":0},"end":{"row":73,"column":0},"action":"insert","lines":["import json","import boto3","import pysam","import os","import logging","from urllib.parse import unquote_plus","","logger = logging.getLogger()","logger.setLevel(logging.INFO)","","s3_client = boto3.client('s3')","","def download_file_from_s3(bucket, key, download_path):","    try:","        s3_client.download_file(Bucket=bucket, Key=key, Filename=download_path)","        logger.info(f\"Successfully downloaded {key} from bucket {bucket} to {download_path}\")","    except Exception as e:","        logger.error(f\"Error downloading {key} from bucket {bucket}: {str(e)}\")","        raise","","def process_vcf_file(vcf_file_path, chromosome, start, end):","    try:","        vcf = pysam.VariantFile(vcf_file_path)","        ","        found_variants = []","        for rec in vcf.fetch(chromosome, start, end):","            variant_info = f\"{rec.chrom}:{rec.pos} {rec.ref} -> {rec.alts}\"","            found_variants.append(variant_info)","            logger.info(f\"Found variant: {variant_info}\")","","        return found_variants","    except Exception as e:","        logger.error(f\"Error processing VCF file {vcf_file_path}: {str(e)}\")","        raise","","def lambda_handler(event, context):","    try:","        chromosome = event['queryStringParameters']['chromosome']","        start = int(event['queryStringParameters']['start'])","        end = int(event['queryStringParameters']['end'])","","        bucket_name = 'hap1vcf'","        vcf_file_key = 'GATK_variants.vcf.gz'","        ","        download_path = f\"/tmp/{unquote_plus(vcf_file_key)}\"","        index_path = f\"{download_path}.tbi\"","","        download_file_from_s3(bucket_name, vcf_file_key, download_path)","        download_file_from_s3(bucket_name, f\"{vcf_file_key}.tbi\", index_path)","","        found_variants = process_vcf_file(download_path, chromosome, start, end)","","        response_body = {","            'message': 'Variants found',","            'variants': found_variants,","            'query': {","                'chromosome': chromosome,","                'start': start,","                'end': end","            }","        }","","        return {","            'statusCode': 200,","            'body': json.dumps(response_body)","        }","","    except Exception as e:","        logger.error(f\"Error in lambda_handler: {str(e)}\")","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'Error processing your request'})","        }",""],"id":1}],[{"start":{"row":73,"column":0},"end":{"row":74,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":74,"column":0},"end":{"row":84,"column":0},"action":"insert","lines":["if __name__ == \"__main__\":","    test_event = {","        \"queryStringParameters\": {","            \"chromosome\": \"chr1\",","            \"start\": \"100000\",","            \"end\": \"101000\"","        }","    }","    test_context = {}","    print(lambda_handler(test_event, test_context))",""],"id":3}],[{"start":{"row":0,"column":0},"end":{"row":84,"column":0},"action":"remove","lines":["import json","import boto3","import pysam","import os","import logging","from urllib.parse import unquote_plus","","logger = logging.getLogger()","logger.setLevel(logging.INFO)","","s3_client = boto3.client('s3')","","def download_file_from_s3(bucket, key, download_path):","    try:","        s3_client.download_file(Bucket=bucket, Key=key, Filename=download_path)","        logger.info(f\"Successfully downloaded {key} from bucket {bucket} to {download_path}\")","    except Exception as e:","        logger.error(f\"Error downloading {key} from bucket {bucket}: {str(e)}\")","        raise","","def process_vcf_file(vcf_file_path, chromosome, start, end):","    try:","        vcf = pysam.VariantFile(vcf_file_path)","        ","        found_variants = []","        for rec in vcf.fetch(chromosome, start, end):","            variant_info = f\"{rec.chrom}:{rec.pos} {rec.ref} -> {rec.alts}\"","            found_variants.append(variant_info)","            logger.info(f\"Found variant: {variant_info}\")","","        return found_variants","    except Exception as e:","        logger.error(f\"Error processing VCF file {vcf_file_path}: {str(e)}\")","        raise","","def lambda_handler(event, context):","    try:","        chromosome = event['queryStringParameters']['chromosome']","        start = int(event['queryStringParameters']['start'])","        end = int(event['queryStringParameters']['end'])","","        bucket_name = 'hap1vcf'","        vcf_file_key = 'GATK_variants.vcf.gz'","        ","        download_path = f\"/tmp/{unquote_plus(vcf_file_key)}\"","        index_path = f\"{download_path}.tbi\"","","        download_file_from_s3(bucket_name, vcf_file_key, download_path)","        download_file_from_s3(bucket_name, f\"{vcf_file_key}.tbi\", index_path)","","        found_variants = process_vcf_file(download_path, chromosome, start, end)","","        response_body = {","            'message': 'Variants found',","            'variants': found_variants,","            'query': {","                'chromosome': chromosome,","                'start': start,","                'end': end","            }","        }","","        return {","            'statusCode': 200,","            'body': json.dumps(response_body)","        }","","    except Exception as e:","        logger.error(f\"Error in lambda_handler: {str(e)}\")","        return {","            'statusCode': 500,","            'body': json.dumps({'message': 'Error processing your request'})","        }","","if __name__ == \"__main__\":","    test_event = {","        \"queryStringParameters\": {","            \"chromosome\": \"chr1\",","            \"start\": \"100000\",","            \"end\": \"101000\"","        }","    }","    test_context = {}","    print(lambda_handler(test_event, test_context))",""],"id":4},{"start":{"row":0,"column":0},"end":{"row":46,"column":0},"action":"insert","lines":["import unittest","from unittest.mock import patch, MagicMock","from your_lambda_file import lambda_handler","","class TestLambdaFunction(unittest.TestCase):","    def setUp(self):","        self.valid_event = {","            'queryStringParameters': {","                'chromosome': 'chr1',","                'start': '100000',","                'end': '101000'","            }","        }","        self.invalid_event_missing_params = {'queryStringParameters': {}}","        self.invalid_event_bad_params = {","            'queryStringParameters': {","                'chromosome': 'chr1',","                'start': 'one hundred thousand',","                'end': 'one hundred and one thousand'","            }","        }","","    @patch('your_lambda_file.os.listdir', return_value=['GATK_variants.vcf.gz'])","    @patch('your_lambda_file.pysam.VariantFile')","    def test_valid_request_with_variants(self, mock_variant_file, mock_listdir):","        # Setup mock for VariantFile","        mock_vcf = MagicMock()","        mock_vcf.fetch.return_value = [MagicMock(chrom='chr1', pos=100010, ref='A', alts=['C'])]","        mock_variant_file.return_value = mock_vcf","        ","        response = lambda_handler(self.valid_event, None)","        self.assertEqual(response['statusCode'], 200)","        self.assertIn(\"Variants found\", response['body'])","","    def test_invalid_request_missing_parameters(self):","        response = lambda_handler(self.invalid_event_missing_params, None)","        self.assertEqual(response['statusCode'], 400)","        self.assertIn(\"Invalid or missing query parameters\", response['body'])","","    def test_invalid_request_bad_parameters(self):","        response = lambda_handler(self.invalid_event_bad_params, None)","        self.assertEqual(response['statusCode'], 400)","        self.assertIn(\"Invalid query parameter format\", response['body'])","","if __name__ == '__main__':","    unittest.main()",""]}]]},"ace":{"folds":[],"scrolltop":282.6999999999998,"scrollleft":0,"selection":{"start":{"row":46,"column":0},"end":{"row":46,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1709652887081,"hash":"3653bfe4a02f22bf0c4e8bd4733609340d0ced56"}